import numpy as np
from pandas import Series
from pandas.core.arrays import (
    ExtensionArray as ExtensionArray,
    ExtensionOpsMixin,
)
from typing_extensions import Self

from pandas._typing import (
    Scalar,
    TakeIndexer,
    npt,
)

class BaseMaskedArray(ExtensionArray, ExtensionOpsMixin):
    def __getitem__(self, item): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __invert__(self): ...
    def to_numpy(
        self,
        dtype: npt.DTypeLike | None = ...,
        copy: bool = ...,
        na_value: Scalar = ...,
    ) -> np.ndarray: ...
    __array_priority__: int = ...
    def __array__(self, dtype=...) -> np.ndarray: ...
    def __arrow_array__(self, type=...): ...
    def isna(self) -> npt.NDArray[np.bool_]: ...
    @property
    def nbytes(self) -> int: ...
    def take(
        self, indexer: TakeIndexer, allow_fill: bool = ..., fill_value=...
    ) -> Self: ...
    def copy(self) -> Self: ...
    def value_counts(self, dropna: bool = ...) -> Series[int]: ...
